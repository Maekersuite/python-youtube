[project]
name = "python-youtube"
version = "1.0.0"
description = "An async Python wrapper around for YouTube Data API"
authors = [
    { name = "Ikaroskun", email = "merle.liukun@gmail.com" },
    { name = "Artem Khodakov", email = "artem.khodakov@maekersuite.com" },
    { name = "Davide Vago", email = "davide.vago@maekersuite.com.com" },
]
license = "MIT"
keywords = ["youtube-api", "youtube-v3-api", "youtube-data-api", "youtube-sdk"]
dependencies = [
    "aiohttp>=3.10.5",
    "orjson>=3.10.7",
]
readme = "README.md"
requires-python = ">= 3.9"
homepage = "https://github.com/Maekersuite/python-youtube"
repository = "https://github.com/Maekersuite/python-youtube"
classifiers = [
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Intended Audience :: Developers",
]
packages = [
    { include = "pyyoutube" },
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.rye]
managed = true
dev-dependencies = [
    "pytest>=8.3.2",
    "pytest-cov>=5.0.0",
    "ruff>=0.6.3",
    "pytest-asyncio>=0.24.0",
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["pyyoutube"]

[tool.rye.scripts]
"lint" = { chain = [
  "lint:ruff",
]}
"lint:ruff" = "ruff check ."
"fix:ruff" = "ruff check --fix ."

"test" = { chain = ["test:structure"] }
"test:structure" = "pytest -m structure"

[tool.ruff]
# See https://github.com/charliermarsh/ruff#rules for error code definitions.
line-length = 124
target-version = "py39"

[tool.ruff.lint]
select = [
    "ANN", # annotations
    "B",   # bugbear
    "C4",  # comprehensions
    "D",   # docstrings
    "DJ",  # Django
    "DTZ", # naive datetime
    "E",   # style errors
    "EXE", # shebang
    "F",   # flakes
    "G",   # logging format
    "I",   # import sorting
    "ICN", # import conventions
    "INT", # gettext
    "ISC", # string concatenation
    "N",   # naming
    "PGH", # pygrep-hooks
    "PTH", # path
    "PIE", # miscellaneous
    "PL",  # pylint
    "PYI", # typing stubs
    "Q",   # quotes
    "RSE", # raise
    "RUF", # Ruff
    "S",   # security
    "SIM", # simplify
    "T10", # debugger
    "T20", # print
    "TD",  # todos
    "TRY", # tryceratops
    "UP",  # upgrade
    "W",   # style warnings
    "YTT", # sys.version
]
ignore = [
    "ANN002",   # Missing type annotation for `*args`
    "ANN003",   # Missing type annotation for `*kargs`
    "ANN101",   # Missing type annotation for `self` in method
    "ANN102",   # Missing type annotation for `cls` in classmethod
    "ANN204",   # Missing return type annotation for special method `__init__`
    "ANN401",   # Dynamically typed expressions (typing.Any) are disallowed
    "D100",     # Missing docstring in public module
    "D104",     # Missing module docstring
    "D105",     # Missing docstring in magic method
    "D107",     # Missing docstring in __init__
    "PGH003",   # Use specific rule codes when ignoring type issues,
    "PLR0913",  # Too many arguments
    "TD003",    # Missing issue link on the line following this TODO
    "TRY003",   # Avoid specifying long messages outside the exception class
]

[tool.ruff.lint.extend-per-file-ignores]
"*tests_*.py" = ["S101", "ANN201", "D", "PLR2004"]

[tool.ruff.lint.pydocstyle]
convention = "google"
ignore-decorators = ["typing.overload"]

[tool.ruff.format]
docstring-code-format = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--verbose"
testpaths = ["tests"]
filterwarnings = []
asyncio_mode = "auto"
pythonpath = ["."]
python_files = "tests_*.py"
python_functions = "test_* test_*"
markers = [
    "structure: structure tests that doesn't require external resources or services"
]
